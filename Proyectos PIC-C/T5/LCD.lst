CCS PCM C Compiler, Version 4.049, 34317               14-ago-13 12:08

               Filename: C:\Users\Administrador\Desktop\Proyectos PIC-C\T5\LCD.lst

               ROM used: 392 words (5%)
                         Largest free fragment is 2048
               RAM used: 7 (2%) at main() level
                         17 (5%) worst case
               Stack:    3 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   110
0003:  NOP
.................... #include <16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #use Delay (Clock = 4M) 
0056:  MOVLW  23
0057:  MOVWF  04
0058:  BCF    03.7
0059:  MOVF   00,W
005A:  BTFSC  03.2
005B:  GOTO   06A
005C:  MOVLW  01
005D:  MOVWF  78
005E:  CLRF   77
005F:  DECFSZ 77,F
0060:  GOTO   05F
0061:  DECFSZ 78,F
0062:  GOTO   05E
0063:  MOVLW  4A
0064:  MOVWF  77
0065:  DECFSZ 77,F
0066:  GOTO   065
0067:  GOTO   068
0068:  DECFSZ 00,F
0069:  GOTO   05C
006A:  RETLW  00
.................... #include <LCD.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
....................  
.................... #if defined use_portb_lcd 
....................    //#locate lcd = getenv("sfr:PORTB")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf81 
....................    #else 
....................     #locate lcd = 6 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_b(x) 
.................... #else 
....................    //#locate lcd = getenv("sfr:PORTD")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf83 
....................    #else 
....................     #locate lcd = 8 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... #endif 
....................  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
0078:  MOVLW  F0
0079:  BSF    03.5
007A:  MOVWF  08
....................       lcd.rw = 1; 
007B:  BCF    03.5
007C:  BSF    08.2
....................       delay_cycles(1); 
007D:  NOP
....................       lcd.enable = 1; 
007E:  BSF    08.0
....................       delay_cycles(1); 
007F:  NOP
....................       high = lcd.data; 
0080:  MOVF   08,W
0081:  SWAPF  08,W
0082:  ANDLW  0F
0083:  MOVWF  2A
....................       lcd.enable = 0; 
0084:  BCF    08.0
....................       delay_cycles(1); 
0085:  NOP
....................       lcd.enable = 1; 
0086:  BSF    08.0
....................       delay_us(1); 
0087:  NOP
....................       low = lcd.data; 
0088:  MOVF   08,W
0089:  SWAPF  08,W
008A:  ANDLW  0F
008B:  MOVWF  29
....................       lcd.enable = 0; 
008C:  BCF    08.0
....................       set_tris_lcd(LCD_WRITE); 
008D:  MOVLW  00
008E:  BSF    03.5
008F:  MOVWF  08
....................       return( (high<<4) | low); 
0090:  BCF    03.5
0091:  SWAPF  2A,W
0092:  MOVWF  77
0093:  MOVLW  F0
0094:  ANDWF  77,F
0095:  MOVF   77,W
0096:  IORWF  29,W
0097:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
006B:  SWAPF  2A,W
006C:  ANDLW  F0
006D:  MOVWF  77
006E:  MOVLW  0F
006F:  ANDWF  08,W
0070:  IORWF  77,W
0071:  MOVWF  08
....................       delay_cycles(1); 
0072:  NOP
....................       lcd.enable = 1; 
0073:  BSF    08.0
....................       delay_us(2); 
0074:  GOTO   075
....................       lcd.enable = 0; 
0075:  BCF    08.0
.................... } 
0076:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0077:  BCF    08.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
0098:  MOVF   78,W
0099:  MOVWF  29
009A:  BTFSC  29.7
009B:  GOTO   078
....................       lcd.rs = address; 
009C:  BTFSS  27.0
009D:  BCF    08.1
009E:  BTFSC  27.0
009F:  BSF    08.1
....................       delay_cycles(1); 
00A0:  NOP
....................       lcd.rw = 0; 
00A1:  BCF    08.2
....................       delay_cycles(1); 
00A2:  NOP
....................       lcd.enable = 0; 
00A3:  BCF    08.0
....................       lcd_send_nibble(n >> 4); 
00A4:  SWAPF  28,W
00A5:  MOVWF  29
00A6:  MOVLW  0F
00A7:  ANDWF  29,F
00A8:  MOVF   29,W
00A9:  MOVWF  2A
00AA:  CALL   06B
....................       lcd_send_nibble(n & 0xf); 
00AB:  MOVF   28,W
00AC:  ANDLW  0F
00AD:  MOVWF  29
00AE:  MOVWF  2A
00AF:  CALL   06B
.................... } 
00B0:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
00B1:  MOVLW  00
00B2:  BSF    03.5
00B3:  MOVWF  08
....................     lcd.rs = 0; 
00B4:  BCF    03.5
00B5:  BCF    08.1
....................     lcd.rw = 0; 
00B6:  BCF    08.2
....................     lcd.enable = 0; 
00B7:  BCF    08.0
....................     delay_ms(15); 
00B8:  MOVLW  0F
00B9:  MOVWF  23
00BA:  CALL   056
....................     for(i=1;i<=3;++i) { 
00BB:  MOVLW  01
00BC:  MOVWF  21
00BD:  MOVF   21,W
00BE:  SUBLW  03
00BF:  BTFSS  03.0
00C0:  GOTO   0C9
....................        lcd_send_nibble(3); 
00C1:  MOVLW  03
00C2:  MOVWF  2A
00C3:  CALL   06B
....................        delay_ms(5); 
00C4:  MOVLW  05
00C5:  MOVWF  23
00C6:  CALL   056
....................     } 
00C7:  INCF   21,F
00C8:  GOTO   0BD
....................     lcd_send_nibble(2); 
00C9:  MOVLW  02
00CA:  MOVWF  2A
00CB:  CALL   06B
....................     for(i=0;i<=3;++i) 
00CC:  CLRF   21
00CD:  MOVF   21,W
00CE:  SUBLW  03
00CF:  BTFSS  03.0
00D0:  GOTO   0DA
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
00D1:  MOVF   21,W
00D2:  CALL   004
00D3:  MOVWF  22
00D4:  CLRF   27
00D5:  MOVF   22,W
00D6:  MOVWF  28
00D7:  CALL   077
00D8:  INCF   21,F
00D9:  GOTO   0CD
.................... } 
00DA:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
00F2:  DECFSZ 24,W
00F3:  GOTO   0F5
00F4:  GOTO   0F8
....................      address=lcd_line_two; 
00F5:  MOVLW  40
00F6:  MOVWF  25
....................    else 
00F7:  GOTO   0F9
....................      address=0; 
00F8:  CLRF   25
....................    address+=x-1; 
00F9:  MOVLW  01
00FA:  SUBWF  23,W
00FB:  ADDWF  25,F
....................    lcd_send_byte(0,0x80|address); 
00FC:  MOVF   25,W
00FD:  IORLW  80
00FE:  MOVWF  26
00FF:  CLRF   27
0100:  MOVF   26,W
0101:  MOVWF  28
0102:  CALL   077
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
00DB:  MOVF   22,W
00DC:  XORLW  0C
00DD:  BTFSC  03.2
00DE:  GOTO   0E6
00DF:  XORLW  06
00E0:  BTFSC  03.2
00E1:  GOTO   0EE
00E2:  XORLW  02
00E3:  BTFSC  03.2
00E4:  GOTO   104
00E5:  GOTO   109
....................      case '\f'   : lcd_send_byte(0,1); 
00E6:  CLRF   27
00E7:  MOVLW  01
00E8:  MOVWF  28
00E9:  CALL   077
....................                    delay_ms(2); 
00EA:  MOVLW  02
00EB:  MOVWF  23
00EC:  CALL   056
....................                                            break; 
00ED:  GOTO   10F
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
00EE:  MOVLW  01
00EF:  MOVWF  23
00F0:  MOVLW  02
00F1:  MOVWF  24
*
0103:  GOTO   10F
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0104:  CLRF   27
0105:  MOVLW  10
0106:  MOVWF  28
0107:  CALL   077
0108:  GOTO   10F
....................      default     : lcd_send_byte(1,c);     break; 
0109:  MOVLW  01
010A:  MOVWF  27
010B:  MOVF   22,W
010C:  MOVWF  28
010D:  CALL   077
010E:  GOTO   10F
....................    } 
.................... } 
010F:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
....................  
.................... Void main () { 
0110:  CLRF   04
0111:  BCF    03.7
0112:  MOVLW  1F
0113:  ANDWF  03,F
0114:  BSF    03.5
0115:  BSF    1F.0
0116:  BSF    1F.1
0117:  BSF    1F.2
0118:  BCF    1F.3
0119:  MOVLW  07
011A:  MOVWF  1C
....................    while (true){ 
....................       lcd_init (); 
011B:  BCF    03.5
011C:  CALL   0B1
....................       printf (lcd_putc,"Indicador de nivel"); 
011D:  CLRF   21
011E:  MOVF   21,W
011F:  CALL   00C
0120:  INCF   21,F
0121:  MOVWF  77
0122:  MOVWF  22
0123:  CALL   0DB
0124:  MOVLW  12
0125:  SUBWF  21,W
0126:  BTFSS  03.2
0127:  GOTO   11E
....................       output_low(pin_b3); 
0128:  BSF    03.5
0129:  BCF    06.3
012A:  BCF    03.5
012B:  BCF    06.3
....................        
....................       if (input (pin_b0)){ 
012C:  BSF    03.5
012D:  BSF    06.0
012E:  BCF    03.5
012F:  BTFSS  06.0
0130:  GOTO   144
....................          lcd_init (); 
0131:  CALL   0B1
....................          printf (lcd_putc,"Tanque Vacio"); 
0132:  CLRF   21
0133:  MOVF   21,W
0134:  CALL   023
0135:  INCF   21,F
0136:  MOVWF  77
0137:  MOVWF  22
0138:  CALL   0DB
0139:  MOVLW  0C
013A:  SUBWF  21,W
013B:  BTFSS  03.2
013C:  GOTO   133
....................          delay_ms(1000); 
013D:  MOVLW  04
013E:  MOVWF  21
013F:  MOVLW  FA
0140:  MOVWF  23
0141:  CALL   056
0142:  DECFSZ 21,F
0143:  GOTO   13F
....................           
....................          } 
....................           
....................       if (input (pin_b1)){ 
0144:  BSF    03.5
0145:  BSF    06.1
0146:  BCF    03.5
0147:  BTFSS  06.1
0148:  GOTO   15C
....................          lcd_init(); 
0149:  CALL   0B1
....................          printf (lcd_putc,"Tanque Medio"); 
014A:  CLRF   21
014B:  MOVF   21,W
014C:  CALL   034
014D:  INCF   21,F
014E:  MOVWF  77
014F:  MOVWF  22
0150:  CALL   0DB
0151:  MOVLW  0C
0152:  SUBWF  21,W
0153:  BTFSS  03.2
0154:  GOTO   14B
....................          delay_ms(1000); 
0155:  MOVLW  04
0156:  MOVWF  21
0157:  MOVLW  FA
0158:  MOVWF  23
0159:  CALL   056
015A:  DECFSZ 21,F
015B:  GOTO   157
....................       } 
....................        
....................       if (input(pin_b2)){ 
015C:  BSF    03.5
015D:  BSF    06.2
015E:  BCF    03.5
015F:  BTFSS  06.2
0160:  GOTO   186
....................          lcd_init(); 
0161:  CALL   0B1
....................          printf(lcd_putc,"Tanque Lleno"); 
0162:  CLRF   21
0163:  MOVF   21,W
0164:  CALL   045
0165:  INCF   21,F
0166:  MOVWF  77
0167:  MOVWF  22
0168:  CALL   0DB
0169:  MOVLW  0C
016A:  SUBWF  21,W
016B:  BTFSS  03.2
016C:  GOTO   163
....................           
....................          output_high (pin_b3); 
016D:  BSF    03.5
016E:  BCF    06.3
016F:  BCF    03.5
0170:  BSF    06.3
....................          delay_ms (100); 
0171:  MOVLW  64
0172:  MOVWF  23
0173:  CALL   056
....................          output_low (pin_b3); 
0174:  BSF    03.5
0175:  BCF    06.3
0176:  BCF    03.5
0177:  BCF    06.3
....................          delay_ms (100); 
0178:  MOVLW  64
0179:  MOVWF  23
017A:  CALL   056
....................          output_high (pin_b3); 
017B:  BSF    03.5
017C:  BCF    06.3
017D:  BCF    03.5
017E:  BSF    06.3
....................          delay_ms (1000); 
017F:  MOVLW  04
0180:  MOVWF  21
0181:  MOVLW  FA
0182:  MOVWF  23
0183:  CALL   056
0184:  DECFSZ 21,F
0185:  GOTO   181
....................       } 
....................    } 
0186:  GOTO   11C
.................... } 
0187:  SLEEP

Configuration Fuses:
   Word  1: 3F73   RC NOWDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT
